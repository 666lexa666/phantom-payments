from flask import Blueprint, request, jsonify
from supabase import create_client, Client
import os
import requests
import uuid
from datetime import datetime

pikmi_bp = Blueprint("pikmi", __name__)

# üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Supabase
SUPABASE_URL = os.environ.get("SUPABASE_URL")
SUPABASE_SERVICE_ROLE_KEY = os.environ.get("SUPABASE_SERVICE_ROLE_KEY")
supabase: Client = create_client(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY)

# üîê API-–∫–ª—é—á –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ Birs
BIRS_API_KEY = os.environ.get("BIRS_API_KEY")  # –•—Ä–∞–Ω–∏—Ç—Å—è –≤ Render env vars


@pikmi_bp.route("/api/order", methods=["POST"])
def create_order():
    try:
        data = request.get_json()
        if not data:
            return jsonify({"error": "Missing JSON body"}), 400

        steam_id = data.get("steamId")
        amount = data.get("amount")
        api_login = data.get("api_login")
        api_key = data.get("api_key")

        if not all([steam_id, amount, api_login, api_key]):
            return jsonify({"error": "Missing required fields"}), 400

        # üí∞ –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å—É–º–º—É –≤ —Ä—É–±–ª–∏
        amount_rub = amount / 100

        # ‚öôÔ∏è –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ API
        payload = {
            "amount": amount_rub,
            "customer_email": "test@mail.com",
            "callback_url": "https://www.host.com/callback",
        }

        headers = {
            "accept": "application/json",
            "Content-Type": "application/json",
            "X-Api-Key": BIRS_API_KEY,
        }

        # üåç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Birs API
        response = requests.post(
            "https://admin.birs.app/v2.1/payment-test/create-link-payment",
            json=payload,
            headers=headers,
            timeout=20,
        )

        birs_data = response.json()

        # üö® –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ—É—Å–ø–µ—à–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        if not birs_data.get("success", False):
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ Birs API:")
            print(birs_data)
            return jsonify({"error": birs_data.get("message", "Unknown error")}), 400

        # ‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        birs_payment = birs_data.get("data", {})
        payment_id = birs_payment.get("id")
        payment_url = birs_payment.get("payment_url")

        if not payment_id or not payment_url:
            return jsonify({"error": "Invalid Birs response"}), 500

        # üßæ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É purchases
        qr_id = str(uuid.uuid4())
        now = datetime.utcnow().isoformat()

        insert_data = {
            "id": payment_id,
            "user_id": None,
            "amount": amount_rub,
            "status": "pending",
            "steam_login": steam_id,
            "api_login": api_login,
            "payer_phone": None,
            "qr_id": qr_id,
            "qr_payload": payment_url,
            "sndpam": None,
            "refund_attempts": 0,
            "commit": None,
        }

        # üíæ –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ Supabase
        result = supabase.table("purchases").insert(insert_data).execute()

        if result.error:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –≤ purchases:", result.error)
            return jsonify({"error": "Database insert failed"}), 500

        # üì¶ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        return (
            jsonify(
                {
                    "result": {
                        "operation_id": payment_id,
                        "qr_id": qr_id,
                        "qr_link": payment_url,
                    }
                }
            ),
            200,
        )

    except requests.exceptions.RequestException as e:
        print("üåê –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Birs API:", e)
        return jsonify({"error": "Failed to connect to Birs API"}), 502

    except Exception as e:
        print("üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:", e)
        return jsonify({"error": str(e)}), 500
